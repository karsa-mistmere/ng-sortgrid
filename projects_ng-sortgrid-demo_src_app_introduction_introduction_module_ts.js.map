{"version":3,"file":"projects_ng-sortgrid-demo_src_app_introduction_introduction_module_ts.js","mappings":"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","sources":["./projects/ng-sortgrid-demo/src/app/introduction/examples/async-pipe/async-pipe-memory.component.ts","./projects/ng-sortgrid-demo/src/app/introduction/examples/async-pipe/async-pipe-memory.component.html","./projects/ng-sortgrid-demo/src/app/introduction/examples/drag-handle/drag-handle.component.ts","./projects/ng-sortgrid-demo/src/app/introduction/examples/drag-handle/drag-handle.component.html","./projects/ng-sortgrid-demo/src/app/introduction/examples/getting-started/getting-started-memory.component.ts","./projects/ng-sortgrid-demo/src/app/introduction/examples/getting-started/getting-started-memory.component.html","./projects/ng-sortgrid-demo/src/app/introduction/examples/groups/groups-memory.component.ts","./projects/ng-sortgrid-demo/src/app/introduction/examples/groups/groups-memory.component.html","./projects/ng-sortgrid-demo/src/app/introduction/examples/react-on-changes/react-on-changes-memory.component.ts","./projects/ng-sortgrid-demo/src/app/introduction/examples/react-on-changes/react-on-changes-memory.component.html","./projects/ng-sortgrid-demo/src/app/introduction/introduction.component.ts","./projects/ng-sortgrid-demo/src/app/introduction/introduction.component.html","./projects/ng-sortgrid-demo/src/app/introduction/introduction.module.ts","./projects/ng-sortgrid-demo/src/app/introduction/introduction.routing.module.ts","./node_modules/rxjs/dist/esm/internal/operators/delay.js","./node_modules/rxjs/dist/esm/internal/operators/delayWhen.js","./node_modules/rxjs/dist/esm/internal/operators/ignoreElements.js"],"sourcesContent":["import {Component, OnInit} from '@angular/core';\nimport {Observable, of} from 'rxjs';\nimport {delay, tap} from 'rxjs/operators';\n\nimport {NgsgOrderChange} from '../../../../../../ng-sortgrid/src/lib/shared/ngsg-order-change.model';\n\n@Component({\n  selector: 'ngsg-demo-async',\n  templateUrl: './async-pipe-memory.component.html',\n  styleUrls: ['./async-pipe-memory.component.css']\n})\nexport class AsyncPipeMemoryComponent implements OnInit {\n\n  item$: Observable<number[]>;\n  loading = false;\n  public currentSortOrder: number[];\n  public previousSortOrder: number[];\n\n  ngOnInit(): void {\n    this.previousSortOrder = [];\n    this.currentSortOrder = [];\n  }\n\n  public loadItems(): void {\n    this.loading = true;\n    this.item$ = of([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]).pipe(\n      delay(1500),\n      tap(() => this.loading = false)\n    );\n  }\n\n  public applyOrder(orderChange: NgsgOrderChange<number>): void {\n    this.currentSortOrder = orderChange.currentOrder;\n    this.previousSortOrder = orderChange.previousOrder;\n  }\n}\n","<h5 style=\"margin-bottom: 20px\">4. Load items and use them with the async pipe</h5>\n<button style=\"margin-bottom: 20px\" class=\"btn btn-primary\" (click)=\"loadItems()\">Load items</button>\n<div class=\"card border-primary mb-3\">\n  <div class=\"card-body\" *ngIf=\"previousSortOrder.length > 0\">\n    <h1 class=\"card-title\">Previous sort order</h1>\n    <h2 class=\"card-text\">{{ previousSortOrder }}</h2>\n  </div>\n  <div class=\"card-body\">\n    <h1 class=\"card-title\">Current sort order</h1>\n    <h2 class=\"card-text\">{{ currentSortOrder }}</h2>\n  </div>\n</div>\n<div class=\"example-container\">\n  <div *ngIf=\"loading\" class=\"spinner\">\n    <div class=\"double-bounce1\"></div>\n    <div class=\"double-bounce2\"></div>\n  </div>\n  <ngsg-card *ngFor=\"let item of item$ | async\"\n             ngSortgridItem\n             ngSortGridGroup=\"async-items\"\n             [ngSortGridItems]=\"item$ | async\"\n             [item]=\"item\"\n             (sorted)=\"applyOrder($event)\"\n             class=\"example-box\">\n  </ngsg-card>\n</div>\n","import {Component} from '@angular/core';\n\n@Component({\n  selector: 'ngsg-demo-drag-handle',\n  templateUrl: 'drag-handle.component.html',\n  styleUrls: ['./drag-handle.component.css']\n})\nexport class DragHandleComponent {\n\n  public items = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n}\n\n","<h5 style=\"margin-bottom: 20px\">1. Drag the items around using handle</h5>\n\n<div class=\"example-container\">\n  <div *ngFor=\"let item of items\"\n    ngSortgridItem\n    [ngSortGridItems]=\"items\"\n    class=\"example-box\">\n\n    <h1 style=\"color: darkslategray\">\n      {{ item }}\n    </h1>\n\n    <div class=\"example-handle\" ngSortgridDragHandle>\n      <svg width=\"24px\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n        <path d=\"M10 9h4V6h3l-5-5-5 5h3v3zm-1 1H6V7l-5 5 5 5v-3h3v-4zm14 2l-5-5v3h-3v4h3v3l5-5zm-9 3h-4v3H7l5 5 5-5h-3v-3z\"></path>\n        <path d=\"M0 0h24v24H0z\" fill=\"none\"></path>\n      </svg>\n    </div>\n</div>\n","import {Component} from '@angular/core';\n\n@Component({\n  selector: 'ngsg-demo-memory',\n  templateUrl: 'getting-started-memory.component.html'\n})\nexport class GettingStartedMemoryComponent {\n\n  public items = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n}\n\n","<h5 style=\"margin-bottom: 20px\">3. Drag the items around - hold CMD or Control and click on an item to select multiple\n  files</h5>\n<div class=\"example-container\">\n  <ngsg-card *ngFor=\"let item of items\"\n             ngSortgridItem\n             ngSortGridGroup=\"getting-started\"\n             [ngSortGridItems]=\"items\"\n             [item]=\"item\"\n             class=\"example-box\">\n  </ngsg-card>\n</div>\n","import {Component} from '@angular/core';\n\n@Component({\n  selector: 'ngsg-demo-groups-memory',\n  templateUrl: 'groups-memory.component.html'\n})\nexport class GroupsMemoryComponent {\n\n  public items = [1, 2, 3, 4];\n}\n","<div class=\"row\">\n  <div class=\"col\">\n    <div class=\"example-container\">\n      <ngsg-card *ngFor=\"let item of items\"\n           ngSortgridItem\n           ngSortGridGroup=\"one\"\n           [item]=\"item\"\n           [ngSortGridItems]=\"items\"\n           class=\"example-box\">\n        {{ item }}\n      </ngsg-card>\n    </div>\n  </div>\n  <div class=\"col\">\n    <div class=\"example-container\">\n      <ngsg-card *ngFor=\"let item of items\"\n           ngSortgridItem\n           ngSortGridGroup=\"two\"\n           [item]=\"item\"\n           [ngSortGridItems]=\"items\"\n           class=\"example-box\">\n        {{ item }}\n      </ngsg-card>\n    </div>\n  </div>\n</div>\n","import {Component, OnInit} from '@angular/core';\n\nimport {NgsgOrderChange} from '../../../../../../ng-sortgrid/src/lib/shared/ngsg-order-change.model';\n\n@Component({\n  selector: 'ngsg-demo-react-on-changes-memory',\n  templateUrl: 'react-on-changes-memory.component.html'\n})\nexport class ReactOnChangesMemoryComponent implements OnInit {\n\n  public items = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  public currentSortOrder: number[];\n  public previousSortOrder: number[];\n\n  ngOnInit(): void {\n    this.currentSortOrder = [...this.items];\n    this.previousSortOrder = [];\n  }\n\n  public applyOrder(orderChange: NgsgOrderChange<number>): void {\n    this.currentSortOrder = orderChange.currentOrder;\n    this.previousSortOrder = orderChange.previousOrder;\n  }\n\n}\n","<div class=\"card border-primary mb-3\">\n  <div class=\"card-body\" *ngIf=\"previousSortOrder.length > 0\">\n    <h1 class=\"card-title\">Previous sort order</h1>\n    <h2 class=\"card-text\">{{ previousSortOrder }}</h2>\n  </div>\n  <div class=\"card-body\">\n    <h1 class=\"card-title\">Current sort order</h1>\n    <h2 class=\"card-text\">{{ currentSortOrder }}</h2>\n  </div>\n</div>\n<div class=\"example-container\">\n  <ngsg-card *ngFor=\"let item of items\"\n             ngSortgridItem\n             ngSortGridGroup=\"react-on-changes\"\n             [item]=\"item\"\n             [ngSortGridItems]=\"items\"\n             (sorted)=\"applyOrder($event)\"\n             class=\"example-box\">\n    {{ item }}\n  </ngsg-card>\n</div>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-introduction',\n  templateUrl: './introduction.component.html'\n})\nexport class IntroductionComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<ngsg-demo-nav></ngsg-demo-nav>\n<ngsg-demo-header></ngsg-demo-header>\n\n<div class=\"container\">\n  <h1>1. Getting started</h1>\n  <ngsg-demo-step title=\"Loop over your elements with *ngFor. 🛎️ the items needs to be an array. Alternate you can also use the async pipe - see below\" image=\"gs1.png\"></ngsg-demo-step>\n  <ngsg-demo-step title=\"Apply the ngSortgridItem directive\" image=\"gs2.png\"></ngsg-demo-step>\n  <ngsg-demo-memory></ngsg-demo-memory>\n\n  <hr class=\"chaptor-separator\"/>\n\n  <h1>2. React on changes</h1>\n  <p>In most cases you are interested in the new sort order. Often you want to store them in local storage or even send them\n    to the backend. To do so the following two steps are needed in addition to the \"Getting started\" step.</p>\n  <ngsg-demo-step title=\"Pass your items to the directive via the ngSortGridItems input.\" image=\"gs3.png\"></ngsg-demo-step>\n  <ngsg-demo-step title=\"React on the 'sorted' output events\" image=\"gs4.png\"></ngsg-demo-step>\n  <ngsg-demo-react-on-changes-memory></ngsg-demo-react-on-changes-memory>\n\n  <hr class=\"chaptor-separator\"/>\n  <h1>3. Group sortgrids</h1>\n  <p>In case you have more than one sortgriditem on the page you need to group the sortgriditems to avoid dropping drags from\n    one group in another group.</p>\n  <ngsg-demo-step title=\"Pass in a unique name to the ngSortGridGroup input\" image=\"gs5.png\"></ngsg-demo-step>\n  <ngsg-demo-groups-memory></ngsg-demo-groups-memory>\n\n  <hr class=\"chaptor-separator\"/>\n  <h1>4. Use the async pipe</h1>\n  <ngsg-demo-step title=\"Use the async pipe to loop over the items and to pass in the ngSortGridItems\" image=\"gs6.png\"></ngsg-demo-step>\n  <ngsg-demo-async></ngsg-demo-async>\n\n  <hr class=\"chaptor-separator\"/>\n  <h1>5. Scrolling</h1>\n  <p>\n    The scrolling demo is in a separate page because we need more items and a sticky navheader.\n  </p>\n\n  <button routerLink=\"scrolling\" class=\"btn btn-primary\" style=\"margin-bottom: 50px\">Check out the demo...</button>\n\n  <hr class=\"chaptor-separator\"/>\n\n  <h1>6. Customizing the drag area using a handle</h1>\n  <ngsg-demo-step title=\"Apply the ngSortgridDragHandle directive\" image=\"gs7.png\"></ngsg-demo-step>\n  <ngsg-demo-drag-handle></ngsg-demo-drag-handle>\n\n</div>\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\n\nimport {NgsgModule} from '../../../../ng-sortgrid/src/lib/ngsg.module';\nimport {SharedModule} from '../shared/shared.module';\n\nimport {AsyncPipeMemoryComponent} from './examples/async-pipe/async-pipe-memory.component';\nimport { DragHandleComponent } from './examples/drag-handle/drag-handle.component';\nimport {GettingStartedMemoryComponent} from './examples/getting-started/getting-started-memory.component';\nimport {GroupsMemoryComponent} from './examples/groups/groups-memory.component';\nimport {ReactOnChangesMemoryComponent} from './examples/react-on-changes/react-on-changes-memory.component';\nimport {IntroductionComponent} from './introduction.component';\nimport {IntroductionRoutingModule} from './introduction.routing.module';\n\n@NgModule({\n  declarations: [\n    IntroductionComponent,\n    GettingStartedMemoryComponent,\n    ReactOnChangesMemoryComponent,\n    GroupsMemoryComponent,\n    AsyncPipeMemoryComponent,\n    DragHandleComponent\n  ],\n  imports: [\n    CommonModule,\n    IntroductionRoutingModule,\n    NgsgModule,\n    SharedModule\n  ]\n})\nexport class IntroductionModule {\n}\n","import {NgModule} from '@angular/core';\nimport {RouterModule} from '@angular/router';\n\nimport {IntroductionComponent} from './introduction.component';\n\n@NgModule({\n  imports: [RouterModule.forChild([\n    {path: '', component: IntroductionComponent}\n  ])],\n  exports: [RouterModule]\n})\nexport class IntroductionRoutingModule {\n}\n","import { asyncScheduler } from '../scheduler/async';\nimport { delayWhen } from './delayWhen';\nimport { timer } from '../observable/timer';\nexport function delay(due, scheduler = asyncScheduler) {\n    const duration = timer(due, scheduler);\n    return delayWhen(() => duration);\n}\n","import { concat } from '../observable/concat';\nimport { take } from './take';\nimport { ignoreElements } from './ignoreElements';\nimport { mapTo } from './mapTo';\nimport { mergeMap } from './mergeMap';\nexport function delayWhen(delayDurationSelector, subscriptionDelay) {\n    if (subscriptionDelay) {\n        return (source) => concat(subscriptionDelay.pipe(take(1), ignoreElements()), source.pipe(delayWhen(delayDurationSelector)));\n    }\n    return mergeMap((value, index) => delayDurationSelector(value, index).pipe(take(1), mapTo(value)));\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\nexport function ignoreElements() {\n    return operate((source, subscriber) => {\n        source.subscribe(createOperatorSubscriber(subscriber, noop));\n    });\n}\n"],"names":["asyncScheduler","delayWhen","timer","delay","due","scheduler","duration"],"sourceRoot":"webpack:///"}